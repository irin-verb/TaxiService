USE СлужбаТакси


--1. Запросы с выбором строк по условию:

-- запрос с использованием операторов сравнения;
-- вывести названия автомобилей и тарифов поездок на расстояния больше 10-ти км
SELECT Автомобиль, Тариф
FROM Поездка
WHERE Расстояние > 10

-- запрос с использованием логических операторов AND, OR и NOT;
-- вывести информацию о поездках, которые заказывались в сентябре 2022 года
SELECT *
FROM Поездка
WHERE MONTH(Дата) = 9 AND YEAR(Дата) = 2022

-- запрос на использование комбинации логических операторов;
-- вывести тарифы поездок, заказанных 31 или 1 октября любого года, расстояние которых не превышало 5 км
SELECT Тариф
FROM Поездка
WHERE MONTH(Дата) = 10 AND (DAY(Дата) = 31 OR DAY(Дата) = 1) AND NOT (Расстояние > 5)

-- запрос на использование выражений над столбцами;
-- рассчитать стоимость всех поездок
SELECT Поездка.*, Расстояние * Автомобиль.Стоимость + Тариф.Стоимость AS [Стоимость поездки]
FROM Поездка JOIN Автомобиль ON Поездка.Автомобиль = Автомобиль.Название
	JOIN Тариф ON Поездка.Тариф = Тариф.Название

-- запрос с проверкой на принадлежность множеству;
-- вывести информацию о тарифах "Бустер" и "Обычный"
SELECT *
FROM Тариф
WHERE Название IN ('Бустер','Обычный')

-- запрос с проверкой на принадлежность диапазону значений;
-- вывести названия автомобилей стоимостью не меньше 150 и не больше 200 рублей
SELECT Название
FROM Автомобиль
WHERE Стоимость BETWEEN 150 AND 200

-- запрос с проверкой на соответствие шаблону;
-- вывести информацию о клиентах, фамилии которых начинаются с букв "А"-"И"
SELECT *
FROM Клиент
WHERE ФИО LIKE '[А-И]%'

-- запрос с проверкой на неопределенное значение.
-- вывести информацию об клиентах, которые не указали номер своей карты
SELECT *
FROM Клиент
WHERE Карта IS NULL




--2. Запросы на теоретико-множественные реляционные операции:

-- запрос на объединение таблиц;
-- вывести названия автомобилей стоимостью меньше 150 или больше 200 рублей
SELECT Название
FROM Автомобиль
WHERE Стоимость > 200

UNION

SELECT Название
FROM Автомобиль
WHERE Стоимость < 150

-- запрос на пересечение таблиц;
-- вывести названия автомобилей стоимостью не меньше 150 и не больше 200 рублей
SELECT Название
FROM Автомобиль
WHERE Стоимость <= 200

INTERSECT

SELECT Название
FROM Автомобиль
WHERE Стоимость >= 150

-- запрос на вычитание таблиц;
-- вывести названия тарифов, которые еще никто не пробовал в поездках
SELECT Название
FROM Тариф

EXCEPT

SELECT DISTINCT Тариф
FROM Поездка

-- запрос с использованием декартового произведения таблиц;
-- вывести информацию о поездках вместе с фамилиями клиентов
SELECT Поездка.*, Клиент.ФИО
FROM Поездка, Клиент
WHERE Поездка.Клиент = Клиент.Номер




--3. Многотабличные запросы:

-- запрос с использованием соединения двух таблиц по равенству и условием отбора;
-- вывести информацию о поездках по тарифу "обычный" вместе с фамилиями клиентов
SELECT Поездка.*, Клиент.ФИО
FROM Поездка JOIN Клиент ON Поездка.Клиент = Клиент.Номер
WHERE Тариф = 'Обычный'

-- запрос с использованием соединения трех таблиц по равенству и условием отбора;
-- вывести информацию о поездках стоимостью больше 1000 рублей вместе с их стоимостью
SELECT Поездка.*, Расстояние * Автомобиль.Стоимость + Тариф.Стоимость AS [Стоимость поездки]
FROM Поездка JOIN Автомобиль ON Поездка.Автомобиль = Автомобиль.Название
	JOIN Тариф ON Поездка.Тариф = Тариф.Название
WHERE  Расстояние * Автомобиль.Стоимость + Тариф.Стоимость > 1000

-- запрос с использованием соединения по четырем таблицам;
-- добавить к информации о поездках ФИО клиентов, стоимость тарифа и стоимость автомобиля
SELECT Поездка.*, ФИО [ФИО клиента], Тариф.Стоимость [Стоимость тарифа], Автомобиль.Стоимость [Стоимость автомобиля]
FROM Поездка 
	JOIN Автомобиль ON Поездка.Автомобиль = Автомобиль.Название
	JOIN Тариф ON Поездка.Тариф = Тариф.Название
	JOIN Клиент ON Поездка.Клиент = Клиент.Номер

-- запрос с использованием левого внешнего соединения;
-- вывести количество поездок для всех видов тарифов
SELECT Название, [Кол-во поездок]
FROM Тариф LEFT JOIN (SELECT Тариф, COUNT(*) [Кол-во поездок]
						FROM Поездка
						GROUP BY Тариф) [dop]
	ON Тариф.Название = dop.Тариф

-- запрос на использование правого внешнего соединения;
-- вывести суммарное расстояние по поездкам для всех видов тарифов
SELECT Название, [Общее расстояние]
FROM (SELECT Тариф, SUM(Расстояние) [Общее расстояние]
		FROM Поездка
		GROUP BY Тариф) [dop] RIGHT JOIN Тариф ON dop.Тариф = Тариф.Название

-- запрос с использованием функции COUNT;
-- посчитать для каждого клиента количество заказанных поездок
SELECT Клиент, COUNT(*) [Кол-во заказов]
FROM Поездка
GROUP BY Клиент

-- запрос с использованием функции SUM;
-- посчитать для каждого клиент суммарную стоимость всех сделанных заказов
SELECT Клиент, SUM(Расстояние * Автомобиль.Стоимость + Тариф.Стоимость) [Общая стоимость поездок]
FROM Поездка JOIN Автомобиль ON Поездка.Автомобиль = Автомобиль.Название
	JOIN Тариф ON Поездка.Тариф = Тариф.Название
GROUP BY Клиент

-- 3 запроса с использованием временных функций;
-- вывести информацию о поездках за первые десять дней октября 2022 года
SELECT *
FROM Поездка
WHERE YEAR(Дата) = 2022 AND MONTH(Дата) = 10 AND DAY(Дата) BETWEEN 1 AND 10
-- вывести информацию о заказанных не раньше восьми вечера поездках за текущий год
SELECT *
FROM Поездка
WHERE YEAR(Дата) = YEAR(GETDATE()) AND Время >= '20:00:00'
-- вывести информацию о поездках, совершенных не раньше 20 октября текущего года
SELECT *
FROM Поездка
WHERE YEAR(Дата) = YEAR(GETDATE()) AND MONTH(Дата) >= 10 AND DAY(Дата) >= 20

-- запрос с использованием группировки по одному столбцу;
-- определить наибольшую длину поездки для каждого клиента
SELECT Клиент, MAX(Расстояние) [Наибольшее расстояние]
FROM Поездка
GROUP BY Клиент

-- запрос на использование группировки по нескольким столбцам;
-- определить наибольшую длину поездки для каждого клиента и вывести ее вместе с информацией о клиенте 
-- (информацию о клиентах, не заказывавших такси, не выводить)
SELECT Клиент.*, MAX(Расстояние) [Наибольшее расстояние]
FROM Поездка LEFT JOIN Клиент ON Поездка.Клиент = Клиент.Номер
GROUP BY Клиент.Номер, Клиент.ФИО, Клиент.Телефон, Клиент.Карта

-- запрос с использованием условия отбора групп HAVING;
-- вывести информацию о клиентах, заказывавших такси менее 2 раз
SELECT *
FROM Клиент JOIN (SELECT Клиент
				FROM Поездка
				GROUP BY Клиент
				HAVING COUNT(*) < 2) [dop]
			ON Клиент.Номер = dop.Клиент

-- запрос с использованием сортировки по столбцу;
-- вывести информацию о клиентах, где их ФИО будут расположены по алфавиту
SELECT *
FROM Клиент
ORDER BY ФИО ASC




--4. Запросы на модификацию таблиц:
-- запрос на добавление новых данных в таблицу;
-- добавить в таблицу поездок новую запись о поездке 11-го клиента на автомобиле "Премиум" по тарифу "Обычный" 
-- по адресу ул.Синяя 107 6 октября 2022 года в 12:14 на 2 километра,
-- и точно таккую же запись, но для 10-го клиента
INSERT INTO Поездка
VALUES (11, 'Премиум', 'Обычный', 'ул.Синяя 107', '2022-10-06', '12:14', 2),
		(10, 'Премиум', 'Обычный', 'ул.Синяя 107', '2022-10-06', '12:14', 2)
GO

-- запрос на добавление новых данных по результатам выполненного запроса;
-- добавить в таблицу поездок запись для 11-го клиента " по тарифу "Крупногабаритный багаж"
-- и с таким же автомобилем, адресом, датой, временем и расстоянием, как у самой длинной поездки / самых длинных поездок
INSERT INTO Поездка (Клиент, Тариф, Автомобиль, Адрес, Дата, Время, Расстояние)
SELECT *
FROM (SELECT Номер
		FROM Клиент
		WHERE Номер = 11) [d1], 
	(SELECT Название
		FROM Тариф
		WHERE Название = 'Крупногабаритный багаж') [d2],
	(SELECT Автомобиль, Адрес, Дата, Время, Расстояние
		FROM Поездка
		WHERE Расстояние = (SELECT MAX(Расстояние)
							FROM Поездка)) [d3]
GO

-- запрос на обновление существующих данных в таблице;
-- увеличить стоимость всех типов автомобилей на 25 рублей
UPDATE Автомобиль
SET Стоимость = Стоимость + 25
GO

-- запрос на обновление существующих данных по результатам подзапроса во фразе WHERE;
-- увеличить стоимость самого дорогого автомобиля на 25 рублей
UPDATE Автомобиль
SET Стоимость = Стоимость + 25
FROM Автомобиль
WHERE Стоимость = (SELECT MAX(Стоимость)
					FROM Автомобиль)
GO

-- запрос на удаление существующих данных;
-- удалить все записи о поездках
DELETE 
FROM Поездка
GO

-- запрос на удаление существующих данных из одной таблицы на основе связанных с ней таблиц;
-- удалить информацию о поездках с самым дорогим автомобилем и тарифом, у которого нет описания и расстоянием меньше километра
DELETE Поездка
FROM Поездка JOIN Автомобиль ON Поездка.Автомобиль = Автомобиль.Название
WHERE Тариф = 'Перевозка животных' AND Расстояние < 1 AND Автомобиль.Стоимость = (SELECT MAX(Стоимость)																					FROM Автомобиль)
GO

-- запрос на удаление существующих данных по результатам подзапроса во фразе WHERE. 
-- удалить информацию о поездках на расстояние больше среднего расстояния
DELETE
FROM Поездка
WHERE Расстояние > (SELECT AVG(Расстояние)
					FROM Поездка)
GO




--5. Многотабличные запросы с использованием подзапросов:

-- 3 запроса с использованием операций сравнения;
-- вывести информацию о поездках, расстояние которых больше среднего
SELECT *
FROM Поездка
WHERE Расстояние > (SELECT AVG(Расстояние)
					FROM Поездка)
-- вывести описание самого дорогого тарифа
SELECT Описание
FROM Тариф
WHERE Стоимость = (SELECT MAX(Стоимость)
					FROM Тариф)
-- определить номера клиентов, которые вызывали такси больше раз, чем 3-ий клиент
SELECT Клиент
FROM Поездка
GROUP BY Клиент
HAVING COUNT(*) > (SELECT COUNT(*)
					FROM Поездка
					WHERE Клиент = 3)

-- запрос с использованием операции ANY;
-- вывести информацию о клиентах, которые хотя бы раз вызывали такси
SELECT *
FROM Клиент
WHERE Номер = ANY(SELECT Клиент
					FROM Поездка)

-- запрос с использованием операции ALL;
-- вывести названия тарифов, которые ещё никто не пробовал в поездках
SELECT Название
FROM Тариф
WHERE Название <> ALL(SELECT DISTINCT Тариф
						FROM Поездка)

-- запрос с использованием операции IN;
-- вывести номера клиентов, которые не пробовали тариф "Обычный"
SELECT Номер
FROM Клиент
WHERE Номер NOT IN (SELECT Клиент
					FROM Поездка
					WHERE Тариф = 'Обычный')

-- запрос с использованием операции EXISTS;
-- вывести названия тарифов, которые ещё никто не пробовал в поездках
SELECT Название
FROM Тариф
WHERE NOT EXISTS (SELECT *
					FROM Поездка
					WHERE Поездка.Тариф = Тариф.Название)

-- запрос с использованием двух вложенных друг в друга подзапросов;
-- вывести информацию о клиенте(-ах), заказавшем(-их) такси наибольшее количество раз
SELECT *
FROM Клиент
WHERE Номер IN (SELECT Клиент
				FROM Поездка
				GROUP BY Клиент
				HAVING COUNT(*) >= ALL (SELECT COUNT(*)
										FROM Поездка
										GROUP BY Клиент))

-- запрос с использованием трех вложенных друг в друга подзапросов;
-- вывести информацию о поездках с типом тарифа, который встречался среди заказов наибольшее количество раз
SELECT Тариф
FROM (SELECT Тариф, COUNT(*) [Кол-во заказов]
		FROM Поездка
		GROUP BY Тариф) [d1]
WHERE [Кол-во заказов] = (SELECT MAX([Кол-во заказов])
							FROM (SELECT COUNT(*) [Кол-во заказов]
									FROM Поездка
									GROUP BY Тариф)[d2])




--6. Запросы на изменение структуры существующей таблицы:

-- запрос на добавление нового столбца к таблице;
-- добавить к таблице поездок столбец с номером поездки
ALTER TABLE Поездка
ADD Номер int identity (1,1)
GO

-- запрос на добавление нового ограничения к таблице;
-- сделать Номер в таблице Поездка уникальным 
ALTER TABLE Поездка
ADD CONSTRAINT Поездка_УникНомер unique (Номер) 
GO

-- запрос на удаление нового ограничения к таблице;
-- удалить ограничение уникальности для Номер в таблице Поездка
ALTER TABLE Поездка
DROP CONSTRAINT Поездка_УникНомер
GO

-- запрос на удаление нового столбца к таблице;
-- удалить столбец Номер из таблицы Поездка
ALTER TABLE Поездка
DROP COLUMN Номер
GO

-- запрос на изменение типа данных в таблице;
-- увеличить размер памяти, отведенный под столбец Описание таблицы Тариф
ALTER TABLE Тариф
ALTER COLUMN Описание varchar(2000)
GO

-- запрос на добавление нового первичного ключа к таблице с сохранением целостности таблицы;
-- добавить в таблицу Поездка новый столбец - Номер, проставляемый БД автоматически
-- и сделать Номер первичным ключом
ALTER TABLE Поездка
ADD CONSTRAINT Unique_Klient_Date_Time Unique (Клиент, Дата, Время)
GO

ALTER TABLE Поездка
DROP CONSTRAINT PK_Поездка
GO

ALTER TABLE Поездка
ADD Номер int identity (1,1) 
GO

ALTER TABLE Поездка
ADD CONSTRAINT PK_Поездка primary key (Номер)
GO
